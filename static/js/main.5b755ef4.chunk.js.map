{"version":3,"sources":["App.js","index.js"],"names":["App","ref","useRef","useState","answers","setAnswers","guesses","setGuesses","keys","useMemo","Object","words","idx","min","max","length","Math","ceil","floor","random","selected","selectedWords","flatMap","x","split","map","y","toLowerCase","guess","e","guessWord","current","value","trim","console","log","ok","partial","sWord","indexOf","prev","className","style","fontSize","onKeyDown","key","onClick","background","rootElement","document","getElementById","ReactDOM","render"],"mappings":"iMAUe,SAASA,IACtB,IAAMC,EAAMC,mBACZ,EAA8BC,qBAA9B,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACMC,EAAOC,mBAAQ,kBAAMC,OAAOF,KAAKG,KAAQ,CAACA,IAC1CC,EAAMH,mBAAQ,kBAXRI,EAWmB,EAXdC,EAWiBN,EAAKO,OAAS,EAVhDF,EAAMG,KAAKC,KAAKJ,GAChBC,EAAME,KAAKE,MAAMJ,GACVE,KAAKE,MAAMF,KAAKG,UAAYL,EAAMD,EAAM,IAAMA,EAHvD,IAAcA,EAAKC,IAWmC,CAACN,IAE/CY,EAAWZ,EAAKI,GAChBS,EAAgBV,EAAMS,GAAUE,SAAQ,SAACC,GAAD,4BACxCA,EAAEC,MAAM,KAAKC,KAAI,SAACC,GAAD,OAAOA,EAAEC,kBADc,CACEJ,OAG1CK,EAAQ,SAACC,GACb,IAAMC,EAAY7B,EAAI8B,QAAQC,MAG9B,GAFA/B,EAAI8B,QAAQC,MAAQ,GAEfF,EAAUG,OAAf,CAIAC,QAAQC,IAAI,gBAAiBL,GAC7B,IATmB,EASfM,GAAK,EACLC,GAAU,EAVK,cAWChB,GAXD,IAWnB,2BAAmC,CAAC,IAAzBiB,EAAwB,QACjC,GAAIA,IAAUR,EAAUH,cAAe,CACrCS,GAAK,EACLC,GAAU,EACV,MAEoC,IAA7BC,EAAMC,QAAQT,KACrBM,GAAK,EACLC,GAAU,IAnBK,8BAsBnB9B,GAAW,SAACiC,GAAD,4BAAcA,GAAd,CAAoB,CAAEJ,KAAIN,YAAWO,kBAElD,OACE,qBAAKI,UAAU,MAAf,SAEI,sBAAKA,UAAU,MAAf,UACE,qBAAKC,MAAO,CAAEC,SAAU,IAAxB,SAA+BvB,IAC/B,wCAAST,EAAMS,GAAUL,OAAzB,YACA,sBAAK0B,UAAU,eAAf,UACE,uBAAOxC,IAAKA,EAAK2C,UAAW,SAACf,GAAD,MAAiB,UAAVA,EAAEgB,KAAmBjB,OACxD,wBAAQkB,QAAS,SAACjB,GAAD,OAAOD,KAAxB,sBAEF,qBAAKa,UAAU,aAAf,SACGnC,EAAQmB,KAAI,YAAiC,IAA9BW,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,QAASP,EAAgB,EAAhBA,UAC3B,OACE,qBAAKW,UAAU,QAAQC,MAAO,CAAEK,WAAYX,EAAKC,EAAU,SAAW,QAAU,OAAhF,SACGP,SAKT,wBAAQgB,QAASzC,EAAjB,0BACA,qBAAKoC,UAAU,UAAf,SAA0BrC,EAAUO,EAAMS,GAAUK,KAAI,SAAAF,GAAC,OAAI,sBAAMkB,UAAU,kBAAhB,SAAmClB,OAAa,YC7DvH,IAAMyB,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAACpD,EAAD,MAEFgD,I","file":"static/js/main.5b755ef4.chunk.js","sourcesContent":["import { useMemo, useRef, useState } from \"react\";\nimport \"./styles.css\";\nimport words from \"./words.json\";\n\nfunction rint(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport default function App() {\n  const ref = useRef();\n  const [answers, setAnswers] = useState();\n  const [guesses, setGuesses] = useState([]);\n  const keys = useMemo(() => Object.keys(words), [words]);\n  const idx = useMemo(() => rint(0, keys.length - 1), [keys]);\n\n  const selected = keys[idx];\n  const selectedWords = words[selected].flatMap((x) =>\n    [...x.split(\" \").map((y) => y.toLowerCase()), x]\n  );\n\n  const guess = (e) => {\n    const guessWord = ref.current.value;\n    ref.current.value = \"\";\n    \n    if (!guessWord.trim()) {\n      return;\n    }\n    \n    console.log(\"guess word is\", guessWord);\n    let ok = false;\n    let partial = false;\n    for (const sWord of selectedWords) {\n      if (sWord === guessWord.toLowerCase()) {\n        ok = true;\n        partial = false;\n        break;\n      }\n      else if (sWord.indexOf(guessWord) === 0) {\n        ok = true;\n        partial = true;\n      }\n    }\n    setGuesses((prev) => [...prev, { ok, guessWord, partial }]);\n  };\n  return (\n    <div className=\"App\">\n      {\n        <div className=\"app\">\n          <div style={{ fontSize: 60 }}>{selected}</div>\n          <div>{`${words[selected].length} words`}</div>\n          <div className=\"input-button\">\n            <input ref={ref} onKeyDown={(e) => e.key === 'Enter' && guess()} />\n            <button onClick={(e) => guess()}>guess</button>\n          </div>\n          <div className=\"guess-list\">\n            {guesses.map(({ ok, partial, guessWord }) => {\n              return (\n                <div className=\"guess\" style={{ background: ok ? partial ? \"yellow\" : \"green\" : \"red\" }}>\n                  {guessWord}\n                </div>\n              );\n            })}\n          </div>\n          <button onClick={setAnswers}>Show Answers</button>\n          <div className=\"answers\">{answers ? words[selected].map(x => <span className=\"answer is-small\">{x}</span>) : null}</div>\n        </div>\n      }\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}