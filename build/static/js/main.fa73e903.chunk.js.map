{"version":3,"sources":["App.js","index.js"],"names":["window","__words","words","uniq","arr","filter","x","index","indexOf","rint","min","max","Math","ceil","floor","random","getQ","p","URLSearchParams","location","search","get","mode","App","theme","useMemo","createTheme","palette","getDesignTokens","keys","Object","qidx","useState","Number","length","idx","setIdx","useEffect","v","urlParams","set","history","pushState","pathname","setQ","onpopstate","e","setGuesses","setAnswers","ref","useRef","answers","guesses","emoji","legitWords","flatMap","split","map","y","toLowerCase","answerWords","guess","guessWord","current","value","trim","ok","partial","sWord","prev","ThemeProvider","CssBaseline","className","style","fontSize","TextField","inputProps","autoComplete","inputRef","onKeyDown","key","Button","variant","color","onClick","Chip","label","size","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.fa73e903.chunk.js","sourcesContent":["import { Button, TextField, ThemeProvider, Chip } from \"@mui/material\";\nimport { grey } from '@mui/material/colors';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport { createTheme } from '@mui/material/styles';\n\nimport { useMemo, useRef, useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport words from \"./words.json\";\n\nwindow.__words = words;\n\nconst uniq = (arr) => arr.filter(function (x, index) {\n  return arr.indexOf(x) === index;\n});\n\nfunction rint(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getQ = (p) => {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(p);\n}\n\nconst setQ = (p, v) => {\n  const urlParams = new URLSearchParams(window.location.search);\n  if (urlParams.get(p) !== v) {\n    urlParams.set(p, v);\n    history.pushState({}, '', `${location.pathname}?${urlParams}`)\n  }\n}\n\n// style\nconst getDesignTokens = (mode) => ({\n  palette: {\n    mode,\n  },\n});\n\nconst mode = 'dark';\n\n\nexport default function App() {\n  const theme = useMemo(() => createTheme(getDesignTokens(mode)), [mode]);\n\n  const keys = useMemo(() => Object.keys(words), [words]);\n  const qidx = getQ('idx');\n  const [idx, setIdx] = useState(qidx && Number(qidx) ? Number(qidx) : rint(0, keys.length - 1));\n  useEffect(() => {\n    setQ('idx', idx);\n  }, [idx])\n  useEffect(() => {\n    window.onpopstate = function (e) {\n      setGuesses([]);\n      setAnswers(false);\n      const qidx = getQ('idx');\n      if (qidx !== idx) {\n        setIdx(qidx);\n      }\n    };\n  }, [])\n  const ref = useRef();\n  const [answers, setAnswers] = useState();\n  const [guesses, setGuesses] = useState([]);\n\n\n\n  const emoji = keys[idx];\n  const legitWords = uniq(words[emoji].flatMap((x) =>\n    [...x.split(\" \").map((y) => y.toLowerCase()), x]\n  ));\n  const answerWords = uniq(words[emoji].flatMap((x) =>\n    [...x.split(\" \").map((y) => y.toLowerCase())]\n  ));\n\n  const guess = (e) => {\n    const guessWord = ref.current.value.trim();\n    ref.current.value = \"\";\n\n    if (!guessWord) {\n      return;\n    }\n\n    let ok = false;\n    let partial = false;\n    for (const sWord of legitWords) {\n      if (sWord === guessWord.toLowerCase()) {\n        ok = true;\n        partial = false;\n        break;\n      }\n      else if (sWord.indexOf(guessWord) === 0) {\n        ok = true;\n        partial = true;\n      }\n    }\n    setGuesses((prev) => [...prev, { ok, guessWord, partial }]);\n  };\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n\n      <div className=\"app\">\n        <div style={{ fontSize: 60 }}>{emoji}</div>\n        <div className=\"input-button\">\n          <TextField inputProps={{ autoComplete: \"off\" }} inputRef={ref} onKeyDown={(e) => e.key === 'Enter' && guess()} />\n          <Button variant=\"contained\" color=\"primary\" className=\"guess-button\" onClick={(e) => guess()}>Guess Word</Button>\n        </div>\n        <div className=\"guess-list\">\n          {guesses.map(({ ok, partial, guessWord }) => {\n            return (\n              <Chip key={guessWord} className=\"guess\" color={ok ? partial ? \"warning\" : \"success\" : \"error\"} label={guessWord} />\n            );\n          })}\n        </div>\n        <Button variant=\"contained\" size=\"small\" color=\"secondary\" className=\"answers-button secondary\" onClick={setAnswers}>Show Answers</Button>\n        <div className=\"answers\">{answers ? answerWords.map(x => <Chip key={x} className=\"answer\" label={x} />) : null}</div>\n        <Button variant=\"contained\" size=\"small\" color=\"secondary\" className=\"new-game-button secondary\" onClick={() => {\n          setGuesses([]);\n          setAnswers(false);\n          setIdx(rint(0, keys.length - 1));\n        }}>New Emojo</Button>\n      </div>\n    </ThemeProvider>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}