{"version":3,"sources":["App.js","index.js"],"names":["App","ref","useRef","useState","answers","setAnswers","guesses","setGuesses","keys","useMemo","Object","words","idx","min","max","length","Math","ceil","floor","random","selected","selectedWords","flatMap","x","split","map","y","toLowerCase","className","class","style","fontSize","onClick","e","guessWord","current","value","console","log","includes","prev","ok","guess","target","background","join","rootElement","document","getElementById","ReactDOM","render"],"mappings":"0LAUe,SAASA,IACtB,IAAMC,EAAMC,mBACZ,EAA8BC,qBAA9B,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACMC,EAAOC,mBAAQ,kBAAMC,OAAOF,KAAKG,KAAQ,CAACA,IAC1CC,EAAMH,mBAAQ,kBAXRI,EAWmB,EAXdC,EAWiBN,EAAKO,OAAS,EAVhDF,EAAMG,KAAKC,KAAKJ,GAChBC,EAAME,KAAKE,MAAMJ,GACVE,KAAKE,MAAMF,KAAKG,UAAYL,EAAMD,EAAM,IAAMA,EAHvD,IAAcA,EAAKC,IAWmC,CAACN,IAE/CY,EAAWZ,EAAKI,GAChBS,EAAgBV,EAAMS,GAAUE,SAAQ,SAACC,GAAD,OAC5CA,EAAEC,MAAM,KAAKC,KAAI,SAACC,GAAD,OAAOA,EAAEC,oBAa5B,OACE,qBAAKC,UAAU,MAAf,SAEI,sBAAKC,MAAM,MAAX,UACE,qBAAKC,MAAO,CAAEC,SAAU,IAAxB,SAA+BX,IAC/B,wCAAST,EAAMS,GAAUL,OAAzB,YACA,sBAAKc,MAAM,eAAX,UACE,uBAAO5B,IAAKA,IACZ,wBAAQ+B,QAAS,SAACC,GAAD,OAlBb,SAACA,GACb,IAAMC,EAAYjC,EAAIkC,QAAQC,MAC9BnC,EAAIkC,QAAQC,MAAQ,GACpBC,QAAQC,IAAI,gBAAiBJ,GACzBb,EAAckB,SAASL,EAAUP,eACnCpB,GAAW,SAACiC,GAAD,4BAAcA,GAAd,CAAoB,CAAEC,IAAI,EAAMP,kBAE3C3B,GAAW,SAACiC,GAAD,4BAAcA,GAAd,CAAoB,CAAEC,IAAI,EAAOP,kBAWdQ,CAAMT,EAAEU,OAAOP,QAAvC,sBAEF,qBAAKP,MAAM,aAAX,SACGvB,EAAQmB,KAAI,YAAwB,IAArBgB,EAAoB,EAApBA,GAAIP,EAAgB,EAAhBA,UAClB,OACE,qBAAKJ,MAAO,CAAEc,WAAYH,EAAK,QAAU,OAAzC,SACGP,SAKT,wBAAQF,QAAS3B,EAAjB,0BACCD,EAAU,8BAAMO,EAAMS,GAAUyB,KAAK,OAAc,UC/C9D,IAAMC,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAClD,EAAD,MAEF8C,I","file":"static/js/main.191c2f68.chunk.js","sourcesContent":["import { useMemo, useRef, useState } from \"react\";\nimport \"./styles.css\";\nimport words from \"./words.json\";\n\nfunction rint(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport default function App() {\n  const ref = useRef();\n  const [answers, setAnswers] = useState();\n  const [guesses, setGuesses] = useState([]);\n  const keys = useMemo(() => Object.keys(words), [words]);\n  const idx = useMemo(() => rint(0, keys.length - 1), [keys]);\n\n  const selected = keys[idx];\n  const selectedWords = words[selected].flatMap((x) =>\n    x.split(\" \").map((y) => y.toLowerCase())\n  );\n\n  const guess = (e) => {\n    const guessWord = ref.current.value;\n    ref.current.value = \"\";\n    console.log(\"guess word is\", guessWord);\n    if (selectedWords.includes(guessWord.toLowerCase())) {\n      setGuesses((prev) => [...prev, { ok: true, guessWord }]);\n    } else {\n      setGuesses((prev) => [...prev, { ok: false, guessWord }]);\n    }\n  };\n  return (\n    <div className=\"App\">\n      {\n        <div class=\"app\">\n          <div style={{ fontSize: 60 }}>{selected}</div>\n          <div>{`${words[selected].length} words`}</div>\n          <div class=\"input-button\">\n            <input ref={ref} />\n            <button onClick={(e) => guess(e.target.value)}>guess</button>\n          </div>\n          <div class=\"guess-list\">\n            {guesses.map(({ ok, guessWord }) => {\n              return (\n                <div style={{ background: ok ? \"green\" : \"red\" }}>\n                  {guessWord}\n                </div>\n              );\n            })}\n          </div>\n          <button onClick={setAnswers}>Show Answers</button>\n          {answers ? <div>{words[selected].join(\",\")}</div> : null}\n        </div>\n      }\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}