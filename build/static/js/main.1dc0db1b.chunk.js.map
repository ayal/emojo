{"version":3,"sources":["App.js","index.js"],"names":["rint","min","max","Math","ceil","floor","random","App","p","keys","useMemo","Object","words","qidx","URLSearchParams","window","location","search","get","useState","Number","length","idx","setIdx","useEffect","v","urlParams","set","history","replaceState","pathname","setQ","ref","useRef","answers","setAnswers","guesses","setGuesses","selected","selectedWords","flatMap","x","split","map","y","toLowerCase","guess","e","guessWord","current","value","trim","ok","partial","sWord","indexOf","prev","className","style","fontSize","onKeyDown","key","onClick","background","role","class","rootElement","document","getElementById","ReactDOM","render"],"mappings":"iMAIA,SAASA,EAAKC,EAAKC,GAGjB,OAFAD,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,EAexC,SAASM,IACtB,IAbYC,EAaNC,EAAOC,mBAAQ,kBAAMC,OAAOF,KAAKG,KAAQ,CAACA,IAC1CC,GAdML,EAcM,MAbA,IAAIM,gBAAgBC,OAAOC,SAASC,QACrCC,IAAIV,IAarB,EAAsBW,mBAASN,GAAQO,OAAOP,GAAQO,OAAOP,GAAQb,EAAK,EAAGS,EAAKY,OAAS,IAA3F,mBAAOC,EAAP,KAAYC,EAAZ,KACAC,qBAAU,YAXC,SAAChB,EAAGiB,GACf,IAAMC,EAAY,IAAIZ,gBAAgBC,OAAOC,SAASC,QACtDS,EAAUC,IAAInB,EAAGiB,GACjBG,QAAQC,aAAa,GAAI,GAAzB,UAAgCb,SAASc,SAAzC,YAAqDJ,IASnDK,CAAK,MAAOT,KACX,CAACA,IACJ,IAAMU,EAAMC,mBACZ,EAA8Bd,qBAA9B,mBAAOe,EAAP,KAAgBC,EAAhB,KACA,EAA8BhB,mBAAS,IAAvC,mBAAOiB,EAAP,KAAgBC,EAAhB,KAIMC,EAAW7B,EAAKa,GAChBiB,EAAgB3B,EAAM0B,GAAUE,SAAQ,SAACC,GAAD,4BACxCA,EAAEC,MAAM,KAAKC,KAAI,SAACC,GAAD,OAAOA,EAAEC,kBADc,CACEJ,OAG1CK,EAAQ,SAACC,GACb,IAAMC,EAAYhB,EAAIiB,QAAQC,MAG9B,GAFAlB,EAAIiB,QAAQC,MAAQ,GAEfF,EAAUG,OAAf,CAIA,IARmB,EAQfC,GAAK,EACLC,GAAU,EATK,cAUCd,GAVD,IAUnB,2BAAmC,CAAC,IAAzBe,EAAwB,QACjC,GAAIA,IAAUN,EAAUH,cAAe,CACrCO,GAAK,EACLC,GAAU,EACV,MAEoC,IAA7BC,EAAMC,QAAQP,KACrBI,GAAK,EACLC,GAAU,IAlBK,8BAqBnBhB,GAAW,SAACmB,GAAD,4BAAcA,GAAd,CAAoB,CAAEJ,KAAIJ,YAAWK,kBAElD,OACE,qBAAKI,UAAU,MAAf,SAEI,sBAAKA,UAAU,MAAf,UACE,qBAAKC,MAAO,CAAEC,SAAU,IAAxB,SAA+BrB,IAC/B,wCAAS1B,EAAM0B,GAAUjB,OAAzB,YACA,sBAAKoC,UAAU,eAAf,UACE,uBAAOzB,IAAKA,EAAK4B,UAAW,SAACb,GAAD,MAAiB,UAAVA,EAAEc,KAAmBf,OACxD,wBAAQgB,QAAS,SAACf,GAAD,OAAOD,KAAxB,sBAEF,qBAAKW,UAAU,aAAf,SACGrB,EAAQO,KAAI,YAAiC,IAA9BS,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,QAASL,EAAgB,EAAhBA,UAC3B,OACE,sBAAMS,UAAU,QAAQC,MAAO,CAAEK,WAAYX,EAAKC,EAAU,SAAW,QAAU,OAAjF,SACGL,SAKT,wBAAQgB,KAAK,SAASC,MAAM,2BAA2BH,QAAS3B,EAAhE,0BACA,qBAAKsB,UAAU,UAAf,SAA0BvB,EAAUtB,EAAM0B,GAAUK,KAAI,SAAAF,GAAC,OAAI,sBAAMgB,UAAU,SAAhB,SAA0BhB,OAAa,OACpG,wBAAQuB,KAAK,SAASC,MAAM,4BAA4BH,QAAS,WAC/DzB,EAAW,IACXF,GAAW,GACXZ,EAAOvB,EAAK,EAAGS,EAAKY,OAAS,KAH/B,2BC/EV,IAAM6C,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAD,UACE,cAAC/D,EAAD,MAEF2D,I","file":"static/js/main.1dc0db1b.chunk.js","sourcesContent":["import { useMemo, useRef, useState, useEffect } from \"react\";\nimport \"./styles.css\";\nimport words from \"./words.json\";\n\nfunction rint(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst getQ = (p)=> {\n  const urlParams = new URLSearchParams(window.location.search);\n  return urlParams.get(p);\n}\n\nconst setQ = (p, v)=> {\n  const urlParams = new URLSearchParams(window.location.search);\n  urlParams.set(p, v);\n  history.replaceState({}, '', `${location.pathname}?${urlParams}`)\n}\n\n\nexport default function App() {\n  const keys = useMemo(() => Object.keys(words), [words]);\n  const qidx = getQ('idx');\n  const [idx, setIdx] = useState(qidx && Number(qidx) ? Number(qidx) : rint(0, keys.length - 1));\n  useEffect(()=>{\n    setQ('idx', idx);\n  }, [idx])\n  const ref = useRef();\n  const [answers, setAnswers] = useState();\n  const [guesses, setGuesses] = useState([]);\n  \n  \n\n  const selected = keys[idx];\n  const selectedWords = words[selected].flatMap((x) =>\n    [...x.split(\" \").map((y) => y.toLowerCase()), x]\n  );\n\n  const guess = (e) => {\n    const guessWord = ref.current.value;\n    ref.current.value = \"\";\n\n    if (!guessWord.trim()) {\n      return;\n    }\n    \n    let ok = false;\n    let partial = false;\n    for (const sWord of selectedWords) {\n      if (sWord === guessWord.toLowerCase()) {\n        ok = true;\n        partial = false;\n        break;\n      }\n      else if (sWord.indexOf(guessWord) === 0) {\n        ok = true;\n        partial = true;\n      }\n    }\n    setGuesses((prev) => [...prev, { ok, guessWord, partial }]);\n  };\n  return (\n    <div className=\"App\">\n      {\n        <div className=\"app\">\n          <div style={{ fontSize: 60 }}>{selected}</div>\n          <div>{`${words[selected].length} words`}</div>\n          <div className=\"input-button\">\n            <input ref={ref} onKeyDown={(e) => e.key === 'Enter' && guess()} />\n            <button onClick={(e) => guess()}>guess</button>\n          </div>\n          <div className=\"guess-list\">\n            {guesses.map(({ ok, partial, guessWord }) => {\n              return (\n                <span className=\"guess\" style={{ background: ok ? partial ? \"yellow\" : \"green\" : \"red\" }}>\n                  {guessWord}\n                </span>\n              );\n            })}\n          </div>\n          <button role=\"button\" class=\"answers-button secondary\" onClick={setAnswers}>Show Answers</button>\n          <div className=\"answers\">{answers ? words[selected].map(x => <span className=\"answer\">{x}</span>) : null}</div>\n          <button role=\"button\" class=\"new-game-button secondary\" onClick={()=>{\n            setGuesses([]);\n            setAnswers(false);\n            setIdx(rint(0, keys.length - 1));\n          }}>New Game</button>\n        </div>\n      }\n    </div>\n  );\n}\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}